?sliderInput
library("shiny")
?sliderInput
?server
?shinyApp
?vignette
?vignettes
devtools::document()
devtools::document()
system.file('', package="MASS")
system.file(package="MASS")
d<-system.file(package="MASS")
d
list.dirs(d)
?list.dirs
dir(d)
list.dirs(d, recursive = FALSE)
basename(list.dirs(d, recursive = FALSE))
?match.arg
match.arg('a', letters[1:5])
match.arg('f', letters[1:5])
match.arg
?pmatch
?edit
?open
?dir
?runApp
?navigate
??navigate
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::load_all()
run()
devtools::load_all()
run()
3000/60
3000/60+10
devtools::load_all()
run()
devtools::load_all()
run()
open()
runApp('inst/app/mini')
runApp('inst/app/mini')
devtools::load_all()
open()
runApp('inst/app/mini')
devtools::load_all()
open()
runApp('inst/app/mini')
runApp('inst/app/mini')
devtools::document()
devtools::check()
devtools::load_allk()
devtools::load_all()
run()
?run
iris[,apply(iris, is.numeric),drop=FALSE]
iris[,sapply(iris, is.numeric), drop=FALSE]
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
radioButtons("method", "K-means Method", c("K-Means", "K-Median", "K-Means++", "K-Medoid"))
),
dashboardBody()
)
#
# This is a Shiny web application.
#
library("shiny")
library("shinydashboard")
library("shiny.dtc")
x <- readRDS(getOption("shiny.dtc.data"))
sample(faithful, 25)
sample(nrow(faithful), 25)
#
# This is a Shiny web application.
#
library("shiny")
library("shinydashboard")
library("shiny.dtc")
file <- getOption("shiny.dtc.data")
x <- if (file.exists(file)) readRDS() else faithful[sample(nrow(faithful), 25),]
file
x <- if (!is.null(file) && file.exists(file)) readRDS() else faithful[sample(nrow(faithful), 25),]
x
?prcomp
prcomp(scale(faithful))$x
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
radioButtons("method", "K-means Method", c("K-Means", "K-Median", "K-Means++", "K-Medoid"))
),
dashboardBody()
)
#
# This is a Shiny web application.
#
library("shiny")
library("shinydashboard")
library("shiny.dtc")
file <- getOption("shiny.dtc.data")
x <- if (!is.null(file) && file.exists(file)) readRDS() else faithful[sample(nrow(faithful), 25),]
stopifnot("'x' should be a data frame"=is.data.frame(x))
x <- x[, sapply(x, is.numeric)]
stopifnot("'x' should have at least two colums"=ncol(x)>1)
x <- scale(x[complete.cases(x),]) # delete all NA's
if (ncol(x)>2) x <- prcomp(data)$x[,1:2]
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
radioButtons("method", "K-means Method", c("K-Means", "K-Median", "K-Means++", "K-Medoid"))
),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
#
# This is a Shiny web application.
#
library("shiny")
library("shinydashboard")
library("shiny.dtc")
file <- getOption("shiny.dtc.data")
x <- if (!is.null(file) && file.exists(file)) readRDS() else faithful[sample(nrow(faithful), 25),]
stopifnot("'x' should be a data frame"=is.data.frame(x))
x <- x[, sapply(x, is.numeric)]
stopifnot("'x' should have at least two colums"=ncol(x)>1)
x <- scale(x[complete.cases(x),]) # delete all NA's
if (ncol(x)>2) x <- prcomp(data)$x[,1:2]
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
radioButtons("method", "Method", c("K-Means", "K-Median", "K-Means++", "K-Medoid"))
),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
#
# This is a Shiny web application.
#
library("shiny")
library("shinydashboard")
library("shiny.dtc")
file <- getOption("shiny.dtc.data")
x <- if (!is.null(file) && file.exists(file)) readRDS() else faithful[sample(nrow(faithful), 25),]
stopifnot("'x' should be a data frame"=is.data.frame(x))
x <- x[, sapply(x, is.numeric)]
stopifnot("'x' should have at least two colums"=ncol(x)>1)
x <- scale(x[complete.cases(x),]) # delete all NA's
if (ncol(x)>2) x <- prcomp(data)$x[,1:2]
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
radioButtons("method", "Method", c("K-Means", "K-Median", "K-Means++", "K-Medoid"))
),
dashboardBody(),
sidebarCollapsed = FALSE
)
?dashboardPage
#
# This is a Shiny web application.
#
library("shiny")
library("shinydashboard")
library("shiny.dtc")
file <- getOption("shiny.dtc.data")
x <- if (!is.null(file) && file.exists(file)) readRDS() else faithful[sample(nrow(faithful), 25),]
stopifnot("'x' should be a data frame"=is.data.frame(x))
x <- x[, sapply(x, is.numeric)]
stopifnot("'x' should have at least two colums"=ncol(x)>1)
x <- scale(x[complete.cases(x),]) # delete all NA's
if (ncol(x)>2) x <- prcomp(data)$x[,1:2]
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
collapsed = FALSE,
radioButtons("method", "Method", c("K-Means", "K-Median", "K-Means++", "K-Medoid"))
),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
install.packages("shinyjs")
runApp('inst/app/kmeans')
?runExample
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
input$method
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
?layout
runApp('inst/app/kmeans')
?radioButtons
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/mini')
devtools::document()
devtools::check()
devtools::install()
runApp('inst/app/kmeans')
devtools::install()
devtools::install()
shiny::runApp('inst/app/kmeans')
?layout
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
which,min(c(1,NA))
which.min(c(1,NA))
which.min(c(1,NA,NA))
m <- matrix(NA, ncol=2, nrow=3)
file <- getOption("shiny.dtc.data")
x <- if (!is.null(file) && file.exists(file)) readRDS() else faithful[sample(nrow(faithful), 25),]
stopifnot("'x' should be a data frame"=is.data.frame(x))
x <- x[, sapply(x, is.numeric)]
stopifnot("'x' should have two colums"=(ncol(x)==2))
x  <- scale(x[complete.cases(x),]) # delete all NA's
mx <- max(abs(x))
x
distance(x, m)
distance <- function(x, y, method="euclidean") {
n <- nrow(x)
k <- nrow(y)
as.matrix(dist(rbind(y, x), method=method))[k+1:n,1:k]
}
distance(x, m)
which.min(c(NA,NA,NA))
shiny::runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
ls.str(appenv)
d
ls.str(appenv)
?apply
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
appenv$center
x[i,]
runApp('inst/app/kmeans')
x[sample(n, 1),]
runApp('inst/app/kmeans')
d
d
d
i
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
?plot
runApp('~/Seafile/SK_Lehre/CRAN/shiny.dtc/inst/app/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shiny.dtc/inst/app/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shiny.dtc/inst/app/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shiny.dtc/inst/app/kmeans')
d <-1:5
exp(-d)
exp(d)
df<-exp(d)
df/sum(df)
runApp('~/Seafile/SK_Lehre/CRAN/shiny.dtc/inst/app/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shiny.dtc/inst/app/kmeans')
exp(0:5)
x<-exp(0:5)
x/sum(x)
runApp('~/Seafile/SK_Lehre/CRAN/shiny.dtc/inst/app/kmeans')
d
d
d/exp(d)
runApp('inst/app/kmeans')
d
d
dn <- exp(d)
dn/sum(sd)
dn/sum(dn)
d
d
dn/sum(sd)
dn <- exp(d)
dn/sum(sd)
dn/sum(dn)
runApp('inst/app/kmeans')
d
d^2/sum(d^2)
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
?timer
runApp('inst/app/kmeans')
tr
?reactive
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
matrix(c(1,2,3,3), ncol=2), heights=c(2,1)
matrix(c(1,2,3,3), ncol=2))
matrix(c(1,2,3,3), ncol=2)
matrix(c(1,3,2,3), ncol=2)
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
all(c(NA)>0.3)
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
runApp('inst/app/kmeans')
?dashboardHeader
library("shinydashboard")
?dashboardHeader
as.list(1:4)
shiny::runApp('~/Seafile/SK_Lehre/CRAN/shinyDTC/inst/examples-shiny/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shinyDTC/inst/examples-shiny/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shinyDTC/inst/examples-shiny/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shinyDTC/inst/examples-shiny/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shinyDTC/inst/examples-shiny/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shinyDTC/inst/examples-shiny/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shinyDTC/inst/examples-shiny/kmeans')
mx
mathod
method
choices
runApp('inst/examples-shiny/kmeans')
choices
runApp('inst/examples-shiny/kmeans')
method
choices
runApp('inst/examples-shiny/kmeans')
runApp('inst/examples-shiny/kmeans')
runApp('inst/examples-shiny/kmeans')
runApp('inst/examples-shiny/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shinyDTC/inst/examples-shiny/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shinyDTC/inst/examples-shiny/kmeans')
runApp('~/Seafile/SK_Lehre/CRAN/shinyDTC/inst/examples-shiny/kmeans')
devtools::install()
library("shinyDTC")
runAppx()
devtools::install()
library("shinyDTC")
runAppx()
devtools::install()
library("shinyDTC")
runAppx()
runAppx("kmeans")
devtools::install()
library("shinyDTC")
runAppx("kmeans")
file
file.exists(file)
devtools::install()
library("shinyDTC")
runAppx("kmeans")
x
isTRUE(is.data.frame(data.frame()))
?try
devtools::install()
library("shinyDTC")
runAppx("kmeans")
devtools::install()
library("shinyDTC")
library("shinyDTC")
runAppx("kmeans")
dectools::load_all()
devtools::load_all()
runAppx("kmeans")
devtools::load_all()
runAppx("kmeans")
devtools::load_all()
runAppx("kmeans")
devtools::install()
library("shinyDTC")
runAppx("kmeans")
devtools::install()
library("shinyDTC")
runAppx()
runAppx("kmeans")
runApp('~/Seafile/SK_Lehre/CRAN/mmstat4.stat/apps/R/likelihood')
runApp('~/Seafile/SK_Lehre/CRAN/mmstat4.stat/apps/R/association')
runApp('~/Seafile/SK_Lehre/CRAN/mmstat4.stat/apps/R/histogram_simple')
gh("histogram.simple")
library("mmstat4")
ghget("hu.stat")
gh("histogram.simple")
gh("histogram_simple")
gh("histogram_simple/")
gh("histogram_simple/ui.R")
gh(x = "R/histogram_simple/ui.R")
runApp('/tmp/RtmpQpBOZw/mmstat4.stat-main/apps/R/histogram_simple')
gh("histogram_simple/")
gh("histogram_simple/ui.R")
devtools::document()
devtools::check()
devtools::load_all()
vignette("shinyDTC")
devtools::install(build_vignettes = TRUE)
library("shinyDTC")
vignette("shinyDTC")
devtools::install(build_vignettes = TRUE)
library("shinyDTC")
vignette("shinyDTC")
devtools::document()
devtools::check()
devtools::check()
devtools::install(build_vignettes = TRUE)
library("shinyDTC")
vignette("shinyDTC")
?runExample
runExample("mini")
shiny::runExample("mini")
shiny::runExample("mini", package="shinyDTC")
runAppx(dir = "mini", x = iris)
runAppx(dir = "mini")
?runAppx
runAppx()
runExample(NA, package="shinyDTC")
runAppx("test")
runExample(NA, package="shinyDTC")
?runExample
?runApp
?runAppx
?runExample
devtools::document()
devtools::check()
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
library("shinyDTC")
vignette("shinyDTC")
runAppx()
runAppx(example = "mini", x = data)
runAppx("kmeans", faithful)
devtools::install(build_vignettes = TRUE)
library("shinyDTC")
vignette("shinyDTC")
library("shinyDTC")
vignette("shinyDTC")
?runAppx
devtools::document()
pkgload::dev_help('runAppx')
devtools::document()
devtools::document()
devtools::check()
devtools::install(build_vignettes = TRUE)
library("shinyDTC")
?openApp
devtools::document()
devtools::check()
devtools::install(build_vignettes = TRUE)
library("shinyDTC")
devtools::build()
devtools::build()
